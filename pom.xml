<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>groupId</groupId>
    <artifactId>StackedInvest</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>18</maven.compiler.source>
        <maven.compiler.target>18</maven.compiler.target>
    </properties>

    <dependencies>

        <!-- Remote WebDriver dependencies -->
        <!--WebDriverManager automates the browser setup in the Selenium code.-->
        <!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>3.8.1</version>
        </dependency>

        <!-- Selenium libraries -->
        <!--Selenium has is a collection of open source APIs which are used to automate the testing of a web application-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>3.141.59</version>
        </dependency>

        <!-- Appium libraries -->
        <!--Appium is an open-source tool for automating native, mobile web, and hybrid applications on iOS mobile, Android mobile, and Windows desktop platforms -->
        <dependency>
            <groupId>io.appium</groupId>
            <artifactId>java-client</artifactId>
            <version>7.4.1</version>
        </dependency>

        <!-- Cucumber libraries -->
        <!--Cucumber is a testing tool that supports Behavior Driven Development (BDD)-->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>4.3.0</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>4.3.0</version>
            <scope>test</scope>
        </dependency>

        <!--TestNG libary-->
        <!-- TestNG. Test Dependency is a feature in TestNG that allows a test method to depend on a single or a group of test methods. -->
        <!-- https://mvnrepository.com/artifact/org.testng/testng -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.4.0</version>
            <!-- <scope></scope>-->
        </dependency>

        <!-- Common libraries -->
        <!--HTMLunitdriver is the most light weight and fastest implementation headless browser for of WebDriver. It is based on HtmlUnit-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>htmlunit-driver</artifactId>
            <version>2.26</version>
        </dependency>

        <!--The Apache Commons IO library contains utility classes, stream implementations, file filters, file comparators, endian transformation classes, and much more.-->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.7</version>
        </dependency>

        <!--Apache Commons Lang provides a host of helper utilities for the java.lang API, notably String manipulation methods, basic numerical methods, object reflection, concurrency, creation and serialization and System properties. -->
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- Apache-poi libraries -->
        <!--Apache POI is an open-source java library to create and manipulate various file formats based on Microsoft Office.-->
        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.0</version>
        </dependency>

        <!-- Rest-assured libraries -->
        <!-- REST Assured is a java library used for testing and validating the Restful Web Services. -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>4.3.0</version>
        </dependency>

        <!-- SLF4J Logger implementation -->
        <!--This is the main purpose of SLF4J (Simple Logging Facade for Java) – (helps with logging errors)
        a logging abstraction which helps to decouple your application from the underlying logger by allowing
        it to be plugged in – at runtime. -->

        <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.17.1</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.30</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.30</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <!--reporting dependencies-->
            <!--The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application. It generates reports in two different file formats: Plain text files (*. txt) XML files-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M4</version>
                <configuration>
                    <!--
                    <includes>
                    <include>

                    </include>
                    </includes> -->

                    <testFailureIgnore>true</testFailureIgnore> <!-- to get report even when fails -->
                </configuration>
            </plugin>

            <!-- to convert .json files to HTML reports -->
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.0.0</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>test</phase> <!-- the report will be created on test phase -->
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>StackedInvest</projectName>
                            <!-- optional, per documentation set this to "true" to bypass generation
                            of Cucumber Reports entirely, defaults to false if not specified -->
                            <!-- <skip>false</skip> -->
                            <!-- output directory for the generated report -->
                            <outputDirectory>${project.build.directory}</outputDirectory>
                            <!-- optional, defaults to outputDirectory if not specified -->
                            <inputDirectory>${project.build.directory}</inputDirectory>
                            <jsonFiles>
                                <!-- supports wildcard or name pattern -->
                                <param>**/cucumber.json</param> <!-- it will take .json file -->
                            </jsonFiles>

                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <name>StackedInvest</name>
    
</project>